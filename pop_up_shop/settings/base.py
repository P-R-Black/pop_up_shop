"""
Django settings for pop_up_shop project.

Generated by 'django-admin startproject' using Django 4.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
# from dotenv import load_dotenv
import os
import environ

env = environ.Env()
environ.Env.read_env()
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY=os.environ.get('SECRET_KEY')

# print('SEC_TEST', SEC_TEST)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG=True 

# print('DEBUG TEST', DEBUG)
#os.environ.get('DEBUG')

ALLOWED_HOSTS = [
    "*", 
    'mysite.com',
    "localhost:8000", 
    "localhost",
    "38c0db4405f5.ngrok-free.app",
    "https://*.ngrok.io",
    ]



CSRF_TRUSTED_ORIGINS = [
    "https://38c0db4405f5.ngrok-free.app",
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django_celery_beat',
    'mptt',
    'pop_up_home.apps.PopUpHomeConfig',
    'pop_up_auction.apps.PopUpAuctionConfig',
    'pop_accounts.apps.PopAccountsConfig',
    'pop_up_email.apps.PopUpEmailConfig',
    'pop_up_shipping.apps.PopUpShippingConfig',
    'pop_up_finance.apps.PopUpFinanceConfig',
    'pop_up_order.apps.PopUpOrderConfig',
    'pop_up_payment.apps.PopUpPaymentConfig',
    'pop_up_cart.apps.PopUpCartConfig',
    'pop_up_coupon.apps.PopUpCouponConfig',
    'pop_up_reward.apps.PopUpRewardConfig',
    'social_django',
    'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'pop_accounts.backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.facebook.FacebookOAuth2',
    'social_core.backends.google.GoogleOAuth2',
]


SOCIAL_AUTH_FACEBOOK_KEY = os.environ.get('SOCIAL_AUTH_FACEBOOK_KEY')
SOCIAL_AUTH_FACEBOOK_SECRET = os.environ.get('SOCIAL_AUTH_FACEBOOK_SECRET')
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY=os.environ.get('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=os.environ.get('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'pop_accounts.pipeline.save_social_profile',  
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'pop_accounts.pipeline.ensure_user_login',  # Added this to get data from Google sign-in!
    'pop_accounts.pipeline.require_profile_completion',
)



# Add some debug settings temporarily
SOCIAL_AUTH_RAISE_EXCEPTIONS = True  # Set to True if you want to see detailed errors
# SOCIAL_AUTH_LOGIN_ERROR_URL = '/accounts/login/'


SESSION_ENGINE = 'django.contrib.sessions.backends.db'

CSRF_COOKIE_SECURE = False

SESSION_COOKIE_SAMESITE =  None
SESSION_COOKIE_SECURE = False  # Set to True if using HTTPS

SESSION_COOKIE_AGE = 3600
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

ROOT_URLCONF = 'pop_up_shop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, '../templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'pop_up_auction.context_processors.categories',
                'pop_accounts.context_processors.auth_forms',
                'pop_accounts.context_processors.admin_status',
                'pop_up_cart.context_processors.cart',
                'pop_up_home.context_processors.footer_links',
            ],
        },
    },
]

WSGI_APPLICATION = 'pop_up_shop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True


LOGGING = {
    'version': 1,
    'handlers': {
        'security_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'settings/logs/security.log',
        },
         'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'nowpayments.log',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'security': {
            'handlers': ['security_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        '__main__': {  # Your app's logger
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [(os.path.join(BASE_DIR, '../static/'))]
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, '../media/')   

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'pop_accounts.PopUpCustomer'



SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/pop_accounts/social-login-complete/'
SOCIAL_AUTH_LOGIN_URL = '/pop_accounts/social-login-complete/'
LOGIN_REDIRECT_URL = '/pop_accounts/social-login-complete/'
LOGIN_URL = '/'


ADMINS = [("Your Name", "admin@example.com")]
SERVER_EMAIL = "server@example.com"


# REDIS
REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 0


# CELERY
CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'
CELERY_RESULT_SERIALIZER = 'json'

CELERTY_BEAT_SCHEDULE = {
    'check-expired-reservations-every-hour': {
        'task': 'pop_up_auction.tasks.mark_expired_reservations',
        'schedule': crontab(minute=0)
    }
}

CELERY_TIMEZONE = 'America/New_York'  # Set to your project's timezone


# THIS SHOULD BE CHANGED TO A FEW HOURS
PASSWORD_RESET_TIMEOUT = 7200 # 2-hour timeout (in seconds)

# Email Setting
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Cart Session Id
CART_SESSION_ID = 'pop_up_cart' 

# Stripe Data
# os.environ.setdefault('STRIPE_PUBLIC_KEY', "pk_test_dL4uFuUsLi4Gll22DK9qc96h00rBjrjF9S")

STRIPE_PUBLISHABLE_KEY=os.environ.get('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY =os.environ.get('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET =os.environ.get('STRIPE_WEBHOOK_SECRET')
STRIPE_ENDPOINT_SECRET =os.environ.get('STRIPE_ENDPOINT_SECRET')

# stripe listen --forward-to 127.0.0.1:8000/payment/webhook


BRAINTREE_MERCHANT_ID=os.environ.get('BRAINTREE_MERCHANT_ID')
BRAINTREE_PUBLIC_KEY=os.environ.get('BRAINTREE_PUBLIC_KEY')
BRAINTREE_PRIVATE_KEY=os.environ.get('BRAINTREE_PRIVATE_KEY')

NOWPAYMENTS_API_KEY = os.environ.get('NOWPAYMENTS_API_KEY', '')
NOWPAYMENTS_IPN_SECRET = os.environ.get('NOWPAYMENTS_IPN_SECRET', '')
NOWPAYMENTS_SANDBOX = os.environ.get('NOWPAYMENTS_SANDBOX', 'True').lower() == 'true'